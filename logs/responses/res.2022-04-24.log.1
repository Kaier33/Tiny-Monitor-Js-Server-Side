[2022-04-24T16:46:44.774] [INFO] response - DatabaseError [SequelizeDatabaseError]: Data too long for column 'error_info' at row 1
    at Query.formatError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/mysql/query.js:265:16)
    at Query.run (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/mysql/query.js:77:18)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async /Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/sequelize.js:619:16
    at async MySQLQueryInterface.insert (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/abstract/query-interface.js:749:21)
    at async model.save (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/model.js:3987:35)
    at async Function.create (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/model.js:2217:12)
    at async processMessage (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/redis/index.js:10:5) {
  parent: Error: Data too long for column 'error_info' at row 1
      at Packet.asError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packets/packet.js:728:17)
      at Execute.execute (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:456:32)
      at PacketParser.onPacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:85:12)
      at PacketParser.executeStart (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:92:25)
      at Socket.emit (node:events:526:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Socket.Readable.push (node:internal/streams/readable:228:10) {
    code: 'ER_DATA_TOO_LONG',
    errno: 1406,
    sqlState: '22001',
    sqlMessage: "Data too long for column 'error_info' at row 1",
    sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
    parameters: [
      '1bafadc309',
      'script_error',
      'p1891029987',
      `{"type":"script_error","errorInfo":{"colno":13,"lineno":183,"message":"Uncaught Error: manual error","filename":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004687,"errorId":"p1891029987","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<sc`... 2789 more characters,
      1650790004729,
      'p1824846382',
      '::ffff:127.0.0.1',
      '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14701","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
      'prod',
      '1',
      '2022-04-24 16:46:44'
    ]
  },
  original: Error: Data too long for column 'error_info' at row 1
      at Packet.asError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packets/packet.js:728:17)
      at Execute.execute (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:456:32)
      at PacketParser.onPacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:85:12)
      at PacketParser.executeStart (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:92:25)
      at Socket.emit (node:events:526:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Socket.Readable.push (node:internal/streams/readable:228:10) {
    code: 'ER_DATA_TOO_LONG',
    errno: 1406,
    sqlState: '22001',
    sqlMessage: "Data too long for column 'error_info' at row 1",
    sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
    parameters: [
      '1bafadc309',
      'script_error',
      'p1891029987',
      `{"type":"script_error","errorInfo":{"colno":13,"lineno":183,"message":"Uncaught Error: manual error","filename":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004687,"errorId":"p1891029987","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<sc`... 2789 more characters,
      1650790004729,
      'p1824846382',
      '::ffff:127.0.0.1',
      '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14701","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
      'prod',
      '1',
      '2022-04-24 16:46:44'
    ]
  },
  sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  parameters: [
    '1bafadc309',
    'script_error',
    'p1891029987',
    `{"type":"script_error","errorInfo":{"colno":13,"lineno":183,"message":"Uncaught Error: manual error","filename":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004687,"errorId":"p1891029987","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<sc`... 2789 more characters,
    1650790004729,
    'p1824846382',
    '::ffff:127.0.0.1',
    '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14701","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
    'prod',
    '1',
    '2022-04-24 16:46:44'
  ]
}
[2022-04-24T16:46:44.790] [INFO] response - DatabaseError [SequelizeDatabaseError]: Data too long for column 'error_info' at row 1
    at Query.formatError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/mysql/query.js:265:16)
    at Query.run (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/mysql/query.js:77:18)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async /Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/sequelize.js:619:16
    at async MySQLQueryInterface.insert (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/abstract/query-interface.js:749:21)
    at async model.save (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/model.js:3987:35)
    at async Function.create (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/model.js:2217:12)
    at async processMessage (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/redis/index.js:10:5) {
  parent: Error: Data too long for column 'error_info' at row 1
      at Packet.asError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packets/packet.js:728:17)
      at Execute.execute (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:456:32)
      at PacketParser.onPacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:85:12)
      at PacketParser.executeStart (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:92:25)
      at Socket.emit (node:events:526:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Socket.Readable.push (node:internal/streams/readable:228:10) {
    code: 'ER_DATA_TOO_LONG',
    errno: 1406,
    sqlState: '22001',
    sqlMessage: "Data too long for column 'error_info' at row 1",
    sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
    parameters: [
      '1bafadc309',
      'unhandledrejection',
      'p1372037038',
      `{"type":"unhandledrejection","errorInfo":{"error":"2333"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004687,"errorId":"p1372037038","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  docu`... 2642 more characters,
      1650790004729,
      'p1824846382',
      '::ffff:127.0.0.1',
      '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14554","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
      'prod',
      '1',
      '2022-04-24 16:46:44'
    ]
  },
  original: Error: Data too long for column 'error_info' at row 1
      at Packet.asError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packets/packet.js:728:17)
      at Execute.execute (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:456:32)
      at PacketParser.onPacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:85:12)
      at PacketParser.executeStart (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:92:25)
      at Socket.emit (node:events:526:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Socket.Readable.push (node:internal/streams/readable:228:10) {
    code: 'ER_DATA_TOO_LONG',
    errno: 1406,
    sqlState: '22001',
    sqlMessage: "Data too long for column 'error_info' at row 1",
    sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
    parameters: [
      '1bafadc309',
      'unhandledrejection',
      'p1372037038',
      `{"type":"unhandledrejection","errorInfo":{"error":"2333"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004687,"errorId":"p1372037038","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  docu`... 2642 more characters,
      1650790004729,
      'p1824846382',
      '::ffff:127.0.0.1',
      '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14554","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
      'prod',
      '1',
      '2022-04-24 16:46:44'
    ]
  },
  sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  parameters: [
    '1bafadc309',
    'unhandledrejection',
    'p1372037038',
    `{"type":"unhandledrejection","errorInfo":{"error":"2333"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004687,"errorId":"p1372037038","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  docu`... 2642 more characters,
    1650790004729,
    'p1824846382',
    '::ffff:127.0.0.1',
    '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14554","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
    'prod',
    '1',
    '2022-04-24 16:46:44'
  ]
}
[2022-04-24T16:46:44.802] [INFO] response - DatabaseError [SequelizeDatabaseError]: Data too long for column 'error_info' at row 1
    at Query.formatError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/mysql/query.js:265:16)
    at Query.run (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/mysql/query.js:77:18)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async /Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/sequelize.js:619:16
    at async MySQLQueryInterface.insert (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/dialects/abstract/query-interface.js:749:21)
    at async model.save (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/model.js:3987:35)
    at async Function.create (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/sequelize/lib/model.js:2217:12)
    at async processMessage (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/redis/index.js:10:5) {
  parent: Error: Data too long for column 'error_info' at row 1
      at Packet.asError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packets/packet.js:728:17)
      at Execute.execute (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:456:32)
      at PacketParser.onPacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:85:12)
      at PacketParser.executeStart (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:92:25)
      at Socket.emit (node:events:526:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Socket.Readable.push (node:internal/streams/readable:228:10) {
    code: 'ER_DATA_TOO_LONG',
    errno: 1406,
    sqlState: '22001',
    sqlMessage: "Data too long for column 'error_info' at row 1",
    sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
    parameters: [
      '1bafadc309',
      'script_error',
      'p2044809816',
      `{"type":"script_error","errorInfo":{"colno":45,"lineno":185,"message":"Uncaught TypeError: Cannot set properties of null (setting 'height')","filename":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004686,"errorId":"p2044809816","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr`... 2829 more characters,
      1650790004716,
      'p1824846382',
      '::ffff:127.0.0.1',
      '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14741","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
      'prod',
      '1',
      '2022-04-24 16:46:44'
    ]
  },
  original: Error: Data too long for column 'error_info' at row 1
      at Packet.asError (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packets/packet.js:728:17)
      at Execute.execute (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/commands/command.js:29:26)
      at Connection.handlePacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:456:32)
      at PacketParser.onPacket (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:85:12)
      at PacketParser.executeStart (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/packet_parser.js:75:16)
      at Socket.<anonymous> (/Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-Server/node_modules/mysql2/lib/connection.js:92:25)
      at Socket.emit (node:events:526:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Socket.Readable.push (node:internal/streams/readable:228:10) {
    code: 'ER_DATA_TOO_LONG',
    errno: 1406,
    sqlState: '22001',
    sqlMessage: "Data too long for column 'error_info' at row 1",
    sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
    parameters: [
      '1bafadc309',
      'script_error',
      'p2044809816',
      `{"type":"script_error","errorInfo":{"colno":45,"lineno":185,"message":"Uncaught TypeError: Cannot set properties of null (setting 'height')","filename":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004686,"errorId":"p2044809816","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr`... 2829 more characters,
      1650790004716,
      'p1824846382',
      '::ffff:127.0.0.1',
      '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14741","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
      'prod',
      '1',
      '2022-04-24 16:46:44'
    ]
  },
  sql: 'INSERT INTO `error` (`id`,`p_id`,`error_type`,`error_id`,`error_info`,`exception_time`,`user_id`,`ip`,`header`,`environment`,`status`,`created_at`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?);',
  parameters: [
    '1bafadc309',
    'script_error',
    'p2044809816',
    `{"type":"script_error","errorInfo":{"colno":45,"lineno":185,"message":"Uncaught TypeError: Cannot set properties of null (setting 'height')","filename":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},"url":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html","userId":"p1824846382","key":"1bafadc309","deviceInfo":{"screen_info":{"availHeight":1025,"availWidth":1680,"height":1050,"width":1680},"language":"zh","userAgent":"mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/100.0.4896.127 safari/537.36"},"timestamp":1650790004686,"errorId":"p2044809816","breadcrumb_trail":[{"top":8,"left":8,"type":"behavior","subType":"click","target":"BUTTON","outerHTML":"<button id=\\"instance\\">看监控实例</button>","innerHTML":"看监控实例","width":83,"height":25,"pageURL":"file:///Users/kaierchou/Desktop/OpenSource/frontend-monitor/Tiny-Monitor-Js-SDK/test.html"},{"top":8,"left":8,"type":"behavior","subType":"click","target":"BODY","outerHTML":"<body>\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/asda.css\\"> -->\\n<script>\\n  document.querySelector(\\"#jump\\").addEventListener(\\"click\\", function () {\\n    location.href = \\"https://www.baidu.com\\";\\n  });\\n  document.querySelector(\\"#post\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.manualPost();\\n  });\\n  document.querySelector(\\"#clear\\").addEventListener(\\"click\\", function () {\\n    MonitJsSdk.clearErrorStore();\\n  });\\n  document.querySelector('#instance').addEventListener('click', function() {\\n    console.log(MonitJsSdk.instance())\\n  })\\n  document.querySelector('#manualThrow').addEventListener('click', function() {\\n    new Promise((resolve) => {\\n      throw \\"2333\\";\\n    });\\n    setTimeout(() => {\\n      throw new Error('manual error')\\n    })\\n    document.querySelector('#asdas').height = 233\\n  })\\n</script>\\n</body>","innerHTML":"\\n    <button id=\\"instance\\">看监控实例</button>\\n    <button id=\\"jump\\">测试用. 跳出去</button>\\n    <button id=\\"post\\">手动上报</button>\\n    <button id=\\"clear\\">清除所有错误</button>\\n    <button id=\\"manualThrow\\">抛出错误</button>\\n\\n    <h3>需求: 搜集上报，采集聚合，可视分析，监控告警</h3>\\n    <p>报错的归类:</p>\\n    <ul>\\n      <li>try-catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常</li>\\n      <li>\\n        window.addEventListener 捕获没有 catch 的 Promise 异常用\\n        unhandledrejection\\n      </li>\\n      <li>\\n        Vue errorHandler 和 React componentDidCatch Axios\\n        请求统一异常处理用拦截器\\n      </li>\\n      <li>interceptors(可以暴露个方法出来收集接口报错)</li>\\n    </ul>\\n\\n    <p>系统功能</p>\\n    <ol>\\n      <li>收集前端错误（原生、Vue）</li>\\n      <li>错误上报逻辑</li>\\n      <li>错误日志采集服务 by node</li>\\n      <li>编写webpack插件自动上传sourcemap</li>\\n      <li>利用sourcemap还原压缩代码源码位置</li>\\n    </ol>\\n\\n    <h3>前端探针todo:</h3>\\n    <ul>\\n      <li>\\n        需要监控的对象: xhr, fetch, error (常规报错, 资源报错, 异步事件中的报错)\\n      </li>\\n      <li>错误标识 / 错误过滤 / 错误接收 / 错误存储</li>\\n      <li>上报策略</li>\\n      <li>存储策略 indexDB 或者降级 localstore</li>\\n      <li>日志加密</li>\\n      <p>\\n        项目管理: Monorepo (分模块打包、分模块热更新、分包发布。抽离抽象类,\\n        工具类到某个包)\\n      </p>\\n    </ul>\\n    <h3>服务端todo:</h3>\\n    <ul>\\n      <li>接收前端返回的数据</li>\\n      <li>系统运行错误收集. 接口响应错误</li>\\n      <li>用户登录&amp;注册 / 监控项目创建&amp;关联</li>\\n      <li>jwt验证</li>\\n      <li>服务端并发控制</li>\\n      <li>邮件通知告警</li>\\n      <li>可视化分析</li>\\n      <li>后续: nest重构</li>\\n    </ul>\\n    <h3>可视化分析todo</h3>\\n    <ul>\\n      <li>项目选型 react + antd + echarts</li>\\n      <li>报错信息 统计 / 归类/ 分析</li>\\n    </ul>\\n\\n    <h3>待解决点 和 疑惑点</h3>\\n    <p>前端sdk</p>\\n    <ul>\\n      <li>用户行为栈怎么获取和更新</li>\\n      <li>收集错误的采样控制</li>\\n      <li>\\n        性能监控 (常见术语:\\n        FP、FCP、FMP、TTI、LCP、TTFB、FCI、FID、DCL、L、Speed Index)\\n      </li>\\n      <li>录制页面并回放页面 (开源包rrweb)</li>\\n    </ul>\\n    <p>服务端</p>\\n    <ul>\\n      <li>\\n        如何处理上报 高并发量 (redis + rocketMQ) (ELK + kafka\\n        用于搭建日志收集系统集群)\\n      </li>\\n      <li>服务端压测. 最高QPS是多少</li>\\n      <li>错误事件聚合, 聚合的方式是怎么样的</li>\\n    </ul>\\n\\n    <!-- vue -->\\n    <h1>Vue app</h1>\\n    <div id=\\"app\\">{{message}}</div>\\n  \\n\\n<script>\\n  document.cookie = \\"my_token=233\\";\\n  MonitJsSdk.init({\\n    dsn: \\"http://127.0.0.1:8233\\",\\n    // key: \\"localhost\\",\\n    key: \\"1bafadc309\\", // admin\\n    // Vue: Vue\\n  });\\n  \\n  // new Promise((resolve) => {\\n  //   throw \\"2333\\";\\n  // });\\n  // var app = new Vue({\\n  //   el: \\"#app\\",\\n  //   data: {\\n  //     message: \\"Hello Vue!\\",\\n  //   },\\n  //   created: function () {\\n  //     this._NULL.empty = 233;\\n  //   },\\n  // });\\n  // setTimeout(() => {\\n  //   throw new Error('manual error')\\n  // })\\n\\n  // axios(\\"http://127.0.0.1:8233/failed\\").then((res) => {\\n  //   console.log(\\"res:\\", res)\\n  // });\\n\\n  // axios(\\"http://127.0.0.1:8233/succ\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n \\n  // axios(\\"http://127.0.0.1:8233/server-err\\").then((res) => {\\n  //   console.log(\\"res:\\", res);\\n  // });\\n\\n  // const xhr = new XMLHttpRequest();\\n  // xhr.open(\\"get\\", \\"http://127.0.0.1:8233/report-test233\\");\\n  // xhr.setRequestHeader('Channel-Code', 'XD')\\n  // xhr.send(null);\\n  // xhr.onreadystatechange = function () {\\n  //   if (xhr.readyState == 4) {\\n  //     console.log(\\"xhr_done:\\", xhr.responseText);\\n  //   }\\n  // };\\n\\n  // const xhr2 = new XMLHttpRequest();\\n  // xhr2.open(\\"post\\", \\"http://127.0.0.1:8233/postReport\\");\\n  // xhr2.setRequestHeader(\\"Content-type\\", \\"application/x-www-form-urlencoded\\");\\n  // xhr2.send({ a: 233 });\\n  // xhr2.onreadystatechange = function () {\\n  //   if (xhr2.readyState == 4 && xhr2.status >= 200 && xhr2.status < 400) {\\n  //     console.log(\\"xhr_done:\\", xhr2.responseText);\\n  //   }\\n  // };\\n  // throw new Error('nonon')\\n\\n  // setTimeout(() => {\\n  //   asd.asd()\\n  // }, 3000)\\n  // document.querySelector('#asdas').height = 233\\n</script>\\n<!-- <script src=\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue333.js\\"></script> -->\\n<!-- <link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr`... 2829 more characters,
    1650790004716,
    'p1824846382',
    '::ffff:127.0.0.1',
    '{"host":"127.0.0.1:8233","connection":"keep-alive","content-length":"14741","pragma":"no-cache","cache-control":"no-cache","sec-ch-ua":"\\" Not A;Brand\\";v=\\"99\\", \\"Chromium\\";v=\\"100\\", \\"Google Chrome\\";v=\\"100\\"","dnt":"1","sec-ch-ua-mobile":"?0","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36","sec-ch-ua-platform":"\\"macOS\\"","content-type":"text/plain;charset=UTF-8","accept":"*/*","origin":"null","sec-fetch-site":"cross-site","sec-fetch-mode":"no-cors","sec-fetch-dest":"empty","accept-encoding":"gzip, deflate, br","accept-language":"zh,zh-CN;q=0.9,en;q=0.8"}',
    'prod',
    '1',
    '2022-04-24 16:46:44'
  ]
}
